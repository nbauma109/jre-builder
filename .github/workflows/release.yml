name: Build and Release JREs

on:
  push:
    tags:
      - '*'

jobs:
  macos-arm64:
    name: Build JRE (macOS arm64)
    runs-on: macos-15
    steps:
      - name: Check out
        uses: actions/checkout@v5

      - name: Set up Java 25 (arm64)
        uses: actions/setup-java@v5
        with:
          distribution: zulu
          java-version: '25'
          cache: maven

      - name: Use setup-java JDK on PATH
        shell: bash
        run: |
          set -euo pipefail
          echo "JAVA_HOME is: $JAVA_HOME"
          echo "PATH before: $PATH"
          export PATH="$JAVA_HOME/bin:$PATH"
          echo "PATH after:  $PATH"
          which java
          java -version
          which jlink
          jlink --version

      - name: Build JRE image with jlink
        shell: bash
        run: |
          set -euo pipefail
          export PATH="$JAVA_HOME/bin:$PATH"
          mvn --batch-mode --no-transfer-progress clean package

      - name: Determine versions
        shell: bash
        run: |
          set -euo pipefail
          export PATH="$JAVA_HOME/bin:$PATH"
          PROJECT_VERSION=$(mvn --batch-mode --no-transfer-progress -q -DforceStdout help:evaluate -Dexpression=project.version)
          JRE_VERSION=$(java -XshowSettings:properties -version 2>&1 | grep 'java.version = ' | awk '{ print $3 }')
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> "$GITHUB_ENV"
          echo "JRE_VERSION=$JRE_VERSION"         >> "$GITHUB_ENV"

      - name: Rename generated ZIP
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          SRC=$(ls -1 target/jre-*.zip | head -n 1 || true)
          if [ -z "${SRC:-}" ]; then
            echo "No jre-*.zip found in target/. Contents:"; ls -la target; exit 1
          fi
          cp "$SRC" "dist/jre-${PROJECT_VERSION}-${JRE_VERSION}-macos-arm64.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v5
        with:
          name: macos-arm64
          path: dist/*.zip

  macos-x64:
    name: Build JRE (macOS x64)
    runs-on: macos-15-intel
    steps:
      - name: Check out
        uses: actions/checkout@v5

      - name: Set up Java 25 (x64)
        uses: actions/setup-java@v5
        with:
          distribution: zulu
          java-version: '25'
          cache: maven

      - name: Use setup-java JDK on PATH
        shell: bash
        run: |
          set -euo pipefail
          echo "JAVA_HOME is: $JAVA_HOME"
          echo "PATH before: $PATH"
          export PATH="$JAVA_HOME/bin:$PATH"
          echo "PATH after:  $PATH"
          which java
          java -version
          which jlink
          jlink --version

      - name: Build JRE image with jlink
        shell: bash
        run: |
          set -euo pipefail
          export PATH="$JAVA_HOME/bin:$PATH"
          mvn --batch-mode --no-transfer-progress clean package

      - name: Determine versions
        shell: bash
        run: |
          set -euo pipefail
          export PATH="$JAVA_HOME/bin:$PATH"
          PROJECT_VERSION=$(mvn --batch-mode --no-transfer-progress -q -DforceStdout help:evaluate -Dexpression=project.version)
          JRE_VERSION=$(java -XshowSettings:properties -version 2>&1 | grep 'java.version = ' | awk '{ print $3 }')
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> "$GITHUB_ENV"
          echo "JRE_VERSION=$JRE_VERSION"         >> "$GITHUB_ENV"

      - name: Rename generated ZIP
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          SRC=$(ls -1 target/jre-*.zip | head -n 1 || true)
          if [ -z "${SRC:-}" ]; then
            echo "No jre-*.zip found in target/. Contents:"; ls -la target; exit 1
          fi
          cp "$SRC" "dist/jre-${PROJECT_VERSION}-${JRE_VERSION}-macos-x64.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v5
        with:
          name: macos-x64
          path: dist/*.zip

  linux-x64:
    name: Build JRE (Linux x64)
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v5

      - name: Set up Java 25
        uses: actions/setup-java@v5
        with:
          distribution: zulu
          java-version: '25'
          cache: maven

      - name: Use setup-java JDK on PATH
        shell: bash
        run: |
          set -euo pipefail
          echo "JAVA_HOME is: $JAVA_HOME"
          echo "PATH before: $PATH"
          export PATH="$JAVA_HOME/bin:$PATH"
          echo "PATH after:  $PATH"
          which java
          java -version
          which jlink
          jlink --version

      - name: Build JRE image with jlink
        shell: bash
        run: |
          set -euo pipefail
          export PATH="$JAVA_HOME/bin:$PATH"
          mvn --batch-mode --no-transfer-progress clean package

      - name: Determine versions
        shell: bash
        run: |
          set -euo pipefail
          export PATH="$JAVA_HOME/bin:$PATH"
          PROJECT_VERSION=$(mvn --batch-mode --no-transfer-progress -q -DforceStdout help:evaluate -Dexpression=project.version)
          JRE_VERSION=$(java -XshowSettings:properties -version 2>&1 | grep 'java.version = ' | awk '{ print $3 }')
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> "$GITHUB_ENV"
          echo "JRE_VERSION=$JRE_VERSION"         >> "$GITHUB_ENV"

      - name: Rename generated ZIP
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          SRC=$(ls -1 target/jre-*.zip | head -n 1 || true)
          if [ -z "${SRC:-}" ]; then
            echo "No jre-*.zip found in target/. Contents:"; ls -la target; exit 1
          fi
          cp "$SRC" "dist/jre-${PROJECT_VERSION}-${JRE_VERSION}-linux-x64.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v5
        with:
          name: linux-x64
          path: dist/*.zip

  linux-arm64:
    name: Build JRE (Linux arm64)
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Check out
        uses: actions/checkout@v5

      - name: Set up Java 25
        uses: actions/setup-java@v5
        with:
          distribution: zulu
          java-version: '25'
          cache: maven

      - name: Use setup-java JDK on PATH
        shell: bash
        run: |
          set -euo pipefail
          echo "JAVA_HOME is: $JAVA_HOME"
          echo "PATH before: $PATH"
          export PATH="$JAVA_HOME/bin:$PATH"
          echo "PATH after:  $PATH"
          which java
          java -version
          which jlink
          jlink --version

      - name: Build JRE image with jlink
        shell: bash
        run: |
          set -euo pipefail
          export PATH="$JAVA_HOME/bin:$PATH"
          mvn --batch-mode --no-transfer-progress clean package

      - name: Determine versions
        shell: bash
        run: |
          set -euo pipefail
          export PATH="$JAVA_HOME/bin:$PATH"
          PROJECT_VERSION=$(mvn --batch-mode --no-transfer-progress -q -DforceStdout help:evaluate -Dexpression=project.version)
          JRE_VERSION=$(java -XshowSettings:properties -version 2>&1 | grep 'java.version = ' | awk '{ print $3 }')
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> "$GITHUB_ENV"
          echo "JRE_VERSION=$JRE_VERSION"         >> "$GITHUB_ENV"

      - name: Rename generated ZIP
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          SRC=$(ls -1 target/jre-*.zip | head -n 1 || true)
          if [ -z "${SRC:-}" ]; then
            echo "No jre-*.zip found in target/. Contents:"; ls -la target; exit 1
          fi
          cp "$SRC" "dist/jre-${PROJECT_VERSION}-${JRE_VERSION}-linux-arm64.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v5
        with:
          name: linux-arm64
          path: dist/*.zip

  windows-x64:
    name: Build JRE (Windows x64)
    runs-on: windows-latest
    steps:
      - name: Check out
        uses: actions/checkout@v5

      - name: Set up Java 25
        uses: actions/setup-java@v5
        with:
          distribution: zulu
          java-version: '25'
          cache: maven

      - name: Use setup-java JDK on PATH
        shell: bash
        run: |
          set -euo pipefail
          echo "JAVA_HOME is: $JAVA_HOME"
          echo "PATH before: $PATH"
          export PATH="$JAVA_HOME/bin:$PATH"
          echo "PATH after:  $PATH"
          which java
          java -version
          which jlink
          jlink --version

      - name: Build JRE image with jlink
        shell: bash
        run: |
          set -euo pipefail
          export PATH="$JAVA_HOME/bin:$PATH"
          mvn --batch-mode --no-transfer-progress clean package

      - name: Determine versions
        shell: bash
        run: |
          set -euo pipefail
          export PATH="$JAVA_HOME/bin:$PATH"
          PROJECT_VERSION=$(mvn --batch-mode --no-transfer-progress -q -DforceStdout help:evaluate -Dexpression=project.version)
          JRE_VERSION=$(java -XshowSettings:properties -version 2>&1 | grep 'java.version = ' | awk '{ print $3 }')
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> "$GITHUB_ENV"
          echo "JRE_VERSION=$JRE_VERSION"         >> "$GITHUB_ENV"

      - name: Rename generated ZIP
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          SRC=$(ls -1 target/jre-*.zip | head -n 1 || true)
          if [ -z "${SRC:-}" ]; then
            echo "No jre-*.zip found in target/. Contents:"; ls -la target; exit 1
          fi
          cp "$SRC" "dist/jre-${PROJECT_VERSION}-${JRE_VERSION}-windows-x64.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v5
        with:
          name: windows-x64
          path: dist/*.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [macos-arm64, macos-x64, linux-x64, linux-arm64, windows-x64]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v6
        with:
          path: dist

      - name: Flatten artifacts
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p release
          find dist -name "*.zip" -exec mv {} release/ \;
          ls -lh release/

      - name: Publish Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: release/*.zip
