name: Build and Release JREs

on:
  push:
    tags:
      - '*'

jobs:
  macos-arm64:
    name: Build JRE (macOS arm64)
    runs-on: macos-15
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Java 21 (arm64)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Build JRE image with jlink
        run: mvn --batch-mode --no-transfer-progress clean package

      - name: Determine versions
        shell: bash
        run: |
          set -euo pipefail
          PROJECT_VERSION=$(mvn --batch-mode --no-transfer-progress -q -DforceStdout help:evaluate -Dexpression=project.version)
          JRE_VERSION=$(java -XshowSettings:properties -version 2>&1 | grep 'java.version = ' | awk '{ print $3 }')
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV
          echo "JRE_VERSION=$JRE_VERSION"         >> $GITHUB_ENV

      - name: Package image
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          cd target
          # Ensure the default jlink output exists
          test -d image
          # Zip the image directory contents, preserving layout
          zip -r "../dist/jre-${PROJECT_VERSION}-${JRE_VERSION}-macos-arm64.zip" image

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64
          path: dist/*.zip

  macos-x64:
    name: Build JRE (macOS x64)
    runs-on: macos-15-intel
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Java 21 (x64)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Build JRE image with jlink
        run: mvn --batch-mode --no-transfer-progress clean package

      - name: Determine versions
        shell: bash
        run: |
          set -euo pipefail
          PROJECT_VERSION=$(mvn --batch-mode --no-transfer-progress -q -DforceStdout help:evaluate -Dexpression=project.version)
          JRE_VERSION=$(java -XshowSettings:properties -version 2>&1 | grep 'java.version = ' | awk '{ print $3 }')
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV
          echo "JRE_VERSION=$JRE_VERSION"         >> $GITHUB_ENV

      - name: Package image
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          cd target
          test -d image
          zip -r "../dist/jre-${PROJECT_VERSION}-${JRE_VERSION}-macos-x64.zip" image

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-x64
          path: dist/*.zip

  linux-x64:
    name: Build JRE (Linux x64)
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Build JRE image with jlink
        run: mvn --batch-mode --no-transfer-progress clean package

      - name: Determine versions
        shell: bash
        run: |
          set -euo pipefail
          PROJECT_VERSION=$(mvn --batch-mode --no-transfer-progress -q -DforceStdout help:evaluate -Dexpression=project.version)
          JRE_VERSION=$(java -XshowSettings:properties -version 2>&1 | grep 'java.version = ' | awk '{ print $3 }')
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV
          echo "JRE_VERSION=$JRE_VERSION"         >> $GITHUB_ENV

      - name: Package image
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          cd target
          test -d image
          zip -r "../dist/jre-${PROJECT_VERSION}-${JRE_VERSION}-linux-x64.zip" image

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64
          path: dist/*.zip

  linux-arm64:
    name: Build JRE (Linux arm64)
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Build JRE image with jlink
        run: mvn --batch-mode --no-transfer-progress clean package

      - name: Determine versions
        shell: bash
        run: |
          set -euo pipefail
          PROJECT_VERSION=$(mvn --batch-mode --no-transfer-progress -q -DforceStdout help:evaluate -Dexpression=project.version)
          JRE_VERSION=$(java -XshowSettings:properties -version 2>&1 | grep 'java.version = ' | awk '{ print $3 }')
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV
          echo "JRE_VERSION=$JRE_VERSION"         >> $GITHUB_ENV

      - name: Package image
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          cd target
          test -d image
          zip -r "../dist/jre-${PROJECT_VERSION}-${JRE_VERSION}-linux-arm64.zip" image

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64
          path: dist/*.zip

  windows-x64:
    name: Build JRE (Windows x64)
    runs-on: windows-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Build JRE image with jlink
        run: mvn --batch-mode --no-transfer-progress clean package

      - name: Determine versions
        shell: pwsh
        run: |
          $projectVersion = (& mvn --batch-mode --no-transfer-progress -q -DforceStdout help:evaluate -Dexpression=project.version)
          $j = & java -XshowSettings:properties -version 2>&1
          $jreVersion = ($j | Select-String 'java.version = ').ToString().Split()[-1]
          "PROJECT_VERSION=$projectVersion" | Out-File -FilePath $env:GITHUB_ENV -Append
          "JRE_VERSION=$jreVersion"         | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Package image
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          if (-not (Test-Path -Path target\image)) { throw "jlink output not found at target\image" }
          Compress-Archive -Path target\image\* -DestinationPath ("dist\jre-$env:PROJECT_VERSION-$env:JRE_VERSION-windows-x64.zip") -Force

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64
          path: dist\*.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [macos-arm64, macos-x64, linux-x64, linux-arm64, windows-x64]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Flatten artifacts
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p release
          find dist -name "*.zip" -exec mv {} release/ \;
          ls -lh release/

      - name: Publish Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: release/*.zip
